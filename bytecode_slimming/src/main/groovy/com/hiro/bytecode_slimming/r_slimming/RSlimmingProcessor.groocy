package com.hiro.bytecode_slimming.rm_not_runtime_annotation

import com.hiro.bytecode_slimming.BaseProcessor
import com.hiro.bytecode_slimming.ClassDataManager
import com.hiro.bytecode_slimming.Constants
import com.hiro.bytecode_slimming.SingleClassData
import com.hiro.bytecode_slimming.Utils
import org.objectweb.asm.ClassReader
import org.objectweb.asm.ClassWriter

/**
 * R 文件瘦身处理器
 */
class RSlimmingProcessor extends BaseProcessor {

    private static final String R_Class_PURE_NAME = ['R$anim',
                                                     'R$array',
                                                     'R$attr',
                                                     'R$bool',
                                                     'R$color',
                                                     'R$dimen',
                                                     'R$drawable',
                                                     'R$id',
                                                     'R$integer',
                                                     'R$layout',
                                                     'R$mipmap',
                                                     'R$raw',
                                                     'R$string',
                                                     'R$style',
                                                     'R$styleable',
                                                     'R$xml']

    private RSlimmingProcessor() {
    }

    static RSlimmingProcessor getInstance() {
        return InstanceHolder.INSTANCE
    }

    @Override
    void onAccept(List<SingleClassData> classDataList) {
        super.onAccept(classDataList)
        classDataList.each { singleClassData ->
            String rClassName = singleClassData.className
            File rClassFile
            if (isRClass(rClassName)
                    && (!inKeepClassList(rClassName))
                    && Utils.isValidFile((rClassFile = ClassDataManager.getClassFile(rClassName)))) {
                ClassWriter classWriter = new ClassWriter()
                RSlimmingClassVisitor rSlimmingClassVisitor =
                        new RSlimmingClassVisitor(Constants.ASM_VERSION, classWriter)
                new ClassReader(rClassFile.bytes).accept(rSlimmingClassVisitor)
                // 如果类访问器内部发生了数据改变（移除了某些常量字段），则需要将修改后的类数据写回对应的文件中
                if (rSlimmingClassVisitor.changedData) {
                    Utils.write2File(classWriter.toByteArray(), rClassFile)
                }
            }
        }
    }

    private static boolean isRClass(String className) {
        if (Utils.isEmpty(className)) {
            return false
        }
        for (String rClassName : R_Class_PURE_NAME) {
            if (Utils.textEquals(rClassName, className)) {
                return true
            }
        }
        return false
    }

    private static class InstanceHolder {
        static final RSlimmingProcessor INSTANCE = new RSlimmingProcessor()
    }
}